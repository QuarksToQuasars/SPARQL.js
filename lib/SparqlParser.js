/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[11,14,23,33,42,47,96,106,109,111,112,121,122,127,289,290,291,292,293],$V1=[96,106,109,111,112,121,122,127,289,290,291,292,293],$V2=[1,21],$V3=[1,25],$V4=[6,82],$V5=[37,38,50],$V6=[37,50],$V7=[1,55],$V8=[1,57],$V9=[1,53],$Va=[1,56],$Vb=[27,28,284],$Vc=[1,64],$Vd=[1,65],$Ve=[12,15,278],$Vf=[108,130,287,294],$Vg=[12,15,108,130,278],$Vh=[1,76],$Vi=[1,80],$Vj=[1,82],$Vk=[108,130,287,288,294],$Vl=[12,15,108,130,278,288],$Vm=[1,89],$Vn=[2,230],$Vo=[1,88],$Vp=[12,15,27,28,79,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],$Vq=[6,37,38,50,60,67,70,78,80,82],$Vr=[6,12,15,27,37,38,50,60,67,70,78,80,82,278],$Vs=[6,12,15,27,28,30,31,37,38,40,50,60,67,70,78,79,80,82,90,105,108,121,122,124,129,156,157,159,162,163,164,182,193,204,209,211,212,214,215,223,238,243,260,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,295,298,299,301,302,303,304,305,306,307,308,309,310],$Vt=[1,104],$Vu=[1,105],$Vv=[27,31],$Vw=[2,285],$Vx=[1,118],$Vy=[1,116],$Vz=[6,193],$VA=[2,302],$VB=[2,290],$VC=[37,124],$VD=[6,40,67,70,78,80,82],$VE=[2,232],$VF=[1,132],$VG=[1,134],$VH=[1,144],$VI=[1,150],$VJ=[1,153],$VK=[1,149],$VL=[1,151],$VM=[1,147],$VN=[1,148],$VO=[1,154],$VP=[1,155],$VQ=[1,158],$VR=[1,159],$VS=[1,160],$VT=[1,161],$VU=[1,162],$VV=[1,163],$VW=[1,164],$VX=[1,165],$VY=[1,166],$VZ=[1,167],$V_=[1,168],$V$=[1,169],$V01=[6,60,67,70,78,80,82],$V11=[27,28,37,38,50],$V21=[12,15,27,28,79,204,238,240,241,242,244,246,247,249,250,253,255,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,302,310,311,312,313,314,315],$V31=[2,375],$V41=[12,15,40,79,90,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],$V51=[6,105,193],$V61=[40,108],$V71=[6,40,70,78,80,82],$V81=[2,314],$V91=[2,306],$Va1=[12,15,27,182,278],$Vb1=[2,342],$Vc1=[2,338],$Vd1=[12,15,27,28,31,38,40,79,82,108,156,157,159,162,163,164,182,193,204,209,211,212,214,215,243,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,295],$Ve1=[12,15,27,28,30,31,38,40,79,82,90,108,156,157,159,162,163,164,182,193,204,209,211,212,214,215,223,238,243,260,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,295,299,302,303,304,305,306,307,308,309,310],$Vf1=[12,15,27,28,30,31,38,40,79,82,90,108,156,157,159,162,163,164,182,193,204,209,211,212,214,215,223,238,243,260,262,263,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,295,299,302,303,304,305,306,307,308,309,310],$Vg1=[1,227],$Vh1=[1,238],$Vi1=[6,40,78,80,82],$Vj1=[1,249],$Vk1=[1,251],$Vl1=[1,252],$Vm1=[1,253],$Vn1=[1,254],$Vo1=[1,256],$Vp1=[1,257],$Vq1=[2,406],$Vr1=[1,260],$Vs1=[1,261],$Vt1=[1,262],$Vu1=[1,268],$Vv1=[1,263],$Vw1=[1,264],$Vx1=[1,265],$Vy1=[1,266],$Vz1=[1,267],$VA1=[1,274],$VB1=[1,273],$VC1=[38,40,82,108,156,157,159,162,163],$VD1=[1,282],$VE1=[1,283],$VF1=[40,108,295],$VG1=[12,15,27,28,31,79,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],$VH1=[12,15,27,28,31,38,40,79,82,108,156,157,159,162,163,164,193,211,212,214,215,243,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,295],$VI1=[12,15,27,28,79,240,241,242,244,246,247,249,250,253,255,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,310,311,312,313,314,315],$VJ1=[2,399],$VK1=[1,301],$VL1=[1,302],$VM1=[1,303],$VN1=[6,12,15,27,28,38,40,79,82,108,156,157,159,162,163,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,295],$VO1=[12,15,31,40,79,90,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],$VP1=[28,40],$VQ1=[2,305],$VR1=[6,40,82],$VS1=[6,12,15,28,40,70,78,80,82,240,241,242,244,246,247,249,250,253,255,278,310,311,312,313,314,315],$VT1=[6,12,15,27,28,38,40,70,73,75,78,79,80,82,108,156,157,159,162,163,164,211,214,215,240,241,242,244,246,247,249,250,253,255,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,295,310,311,312,313,314,315],$VU1=[6,12,15,27,28,30,31,38,40,67,70,73,75,78,79,80,82,108,156,157,159,162,163,164,193,211,214,215,223,238,240,241,242,243,244,246,247,249,250,253,255,260,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,295,299,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$VV1=[1,326],$VW1=[1,325],$VX1=[1,332],$VY1=[1,331],$VZ1=[28,164],$V_1=[6,12,15,27,28,40,67,70,78,80,82,240,241,242,244,246,247,249,250,253,255,278,310,311,312,313,314,315],$V$1=[6,12,15,27,28,30,31,38,40,60,67,70,73,75,78,79,80,82,108,156,157,159,162,163,164,193,211,214,215,223,238,240,241,242,243,244,246,247,249,250,253,255,260,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,295,296,299,302,303,304,305,306,307,308,309,310,311,312,313,314,315],$V02=[12,15,28,182,204,209,278],$V12=[2,356],$V22=[1,355],$V32=[38,40,82,108,156,157,159,162,163,295],$V42=[2,344],$V52=[12,15,27,28,31,38,40,79,82,108,156,157,159,162,163,164,182,193,211,212,214,215,243,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,295],$V62=[30,31,193,243,303,304],$V72=[30,31,193,223,238,243,260,272,273,274,275,276,277,302,303,304,305,306,307,308,309,310],$V82=[30,31,193,223,238,243,260,272,273,274,275,276,277,284,299,302,303,304,305,306,307,308,309,310],$V92=[1,388],$Va2=[1,403],$Vb2=[1,400],$Vc2=[1,401],$Vd2=[12,15,27,28,79,204,238,240,241,242,244,246,247,249,250,253,255,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,302,310,311,312,313,314,315],$Ve2=[12,15,27,28,38,40,79,82,108,156,157,159,162,163,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],$Vf2=[12,15,27,278],$Vg2=[12,15,27,28,38,40,79,82,108,156,157,159,162,163,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,295],$Vh2=[2,317],$Vi2=[12,15,27,182,193,278],$Vj2=[1,455],$Vk2=[1,456],$Vl2=[12,15,31,79,90,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],$Vm2=[6,12,15,27,28,40,73,75,78,80,82,240,241,242,244,246,247,249,250,253,255,278,310,311,312,313,314,315],$Vn2=[2,312],$Vo2=[12,15,28,182,204,278],$Vp2=[38,40,82,108,156,157,159,162,163,193,212,295],$Vq2=[12,15,27,28,40,79,108,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278],$Vr2=[12,15,27,28,31,79,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,298,299],$Vs2=[12,15,27,28,31,79,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,298,299,301,302],$Vt2=[1,547],$Vu2=[1,548],$Vv2=[2,300],$Vw2=[12,15,31,182,209,278];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"QueryOrUpdateUnit":3,"QueryOrUpdateUnit_repetition0":4,"QueryOrUpdateUnit_group0":5,"EOF":6,"Query":7,"Query_group0":8,"Query_option0":9,"BaseDecl":10,"BASE":11,"IRIREF":12,"PrefixDecl":13,"PREFIX":14,"PNAME_NS":15,"SelectQuery":16,"SelectClause":17,"SelectQuery_repetition0":18,"WhereClause":19,"SolutionModifier":20,"SubSelect":21,"SubSelect_option0":22,"SELECT":23,"SelectClause_option0":24,"SelectClause_group0":25,"SelectClauseItem":26,"VAR":27,"(":28,"Expression":29,"AS":30,")":31,"ConstructQuery":32,"CONSTRUCT":33,"ConstructTemplate":34,"ConstructQuery_repetition0":35,"ConstructQuery_repetition1":36,"WHERE":37,"{":38,"ConstructQuery_option0":39,"}":40,"DescribeQuery":41,"DESCRIBE":42,"DescribeQuery_group0":43,"DescribeQuery_repetition0":44,"DescribeQuery_option0":45,"AskQuery":46,"ASK":47,"AskQuery_repetition0":48,"DatasetClause":49,"FROM":50,"DatasetClause_option0":51,"iri":52,"WhereClause_option0":53,"GroupGraphPattern":54,"SolutionModifier_option0":55,"SolutionModifier_option1":56,"SolutionModifier_option2":57,"SolutionModifier_option3":58,"GroupClause":59,"GROUP":60,"BY":61,"GroupClause_repetition_plus0":62,"GroupCondition":63,"BuiltInCall":64,"FunctionCall":65,"HavingClause":66,"HAVING":67,"HavingClause_repetition_plus0":68,"OrderClause":69,"ORDER":70,"OrderClause_repetition_plus0":71,"OrderCondition":72,"ASC":73,"BrackettedExpression":74,"DESC":75,"Constraint":76,"LimitOffsetClauses":77,"LIMIT":78,"INTEGER":79,"OFFSET":80,"ValuesClause":81,"VALUES":82,"InlineData":83,"ValuesClauseInline":84,"InlineData_repetition0":85,"InlineData_repetition1":86,"InlineData_repetition2":87,"DataBlockValue":88,"Literal":89,"UNDEF":90,"DataBlockValueList":91,"DataBlockValueList_repetition0":92,"Update":93,"Update_repetition0":94,"Update1":95,"LOAD":96,"Update1_option0":97,"Update1_option1":98,"Update1_group0":99,"Update1_option2":100,"GraphRefAll":101,"Update1_group1":102,"Update1_option3":103,"GraphOrDefault":104,"TO":105,"CREATE":106,"Update1_option4":107,"GRAPH":108,"INSERTDATA":109,"QuadPattern":110,"DELETEDATA":111,"DELETEWHERE":112,"Update1_option5":113,"InsertClause":114,"Update1_option6":115,"Update1_repetition0":116,"Update1_option7":117,"DeleteClause":118,"Update1_option8":119,"Update1_repetition1":120,"DELETE":121,"INSERT":122,"UsingClause":123,"USING":124,"UsingClause_option0":125,"WithClause":126,"WITH":127,"IntoGraphClause":128,"INTO":129,"DEFAULT":130,"GraphOrDefault_option0":131,"GraphRefAll_group0":132,"QuadPattern_option0":133,"QuadPattern_repetition0":134,"QuadsNotTriples":135,"QuadsNotTriples_group0":136,"QuadsNotTriples_option0":137,"QuadsNotTriples_option1":138,"QuadsNotTriples_option2":139,"TriplesTemplate":140,"TriplesTemplate_repetition0":141,"TriplesSameSubject":142,"TriplesTemplate_option0":143,"GroupGraphPatternSub":144,"GroupGraphPatternSub_option0":145,"GroupGraphPatternSub_repetition0":146,"GroupGraphPatternSubTail":147,"GraphPatternNotTriples":148,"GroupGraphPatternSubTail_option0":149,"GroupGraphPatternSubTail_option1":150,"TriplesBlock":151,"TriplesBlock_repetition0":152,"TriplesSameSubjectPath":153,"TriplesBlock_option0":154,"GraphPatternNotTriples_repetition0":155,"OPTIONAL":156,"MINUS":157,"GraphPatternNotTriples_group0":158,"SERVICE":159,"GraphPatternNotTriples_option0":160,"GraphPatternNotTriples_group1":161,"FILTER":162,"BIND":163,"NIL":164,"FunctionCall_option0":165,"FunctionCall_repetition0":166,"ExpressionList":167,"ExpressionList_repetition0":168,"ConstructTemplate_option0":169,"ConstructTriples":170,"ConstructTriples_repetition0":171,"ConstructTriples_option0":172,"VarOrTerm":173,"PropertyListNotEmpty":174,"TriplesNode":175,"PropertyList":176,"PropertyList_option0":177,"PropertyListNotEmpty_repetition0":178,"VerbObjectList":179,"Verb":180,"ObjectList":181,"a":182,"ObjectList_repetition0":183,"GraphNode":184,"PropertyListPathNotEmpty":185,"TriplesNodePath":186,"TriplesSameSubjectPath_option0":187,"PropertyListPathNotEmpty_group0":188,"PropertyListPathNotEmpty_repetition0":189,"GraphNodePath":190,"PropertyListPathNotEmpty_repetition1":191,"PropertyListPathNotEmptyTail":192,";":193,"PropertyListPathNotEmptyTail_group0":194,"Path":195,"Path_repetition0":196,"PathSequence":197,"PathSequence_repetition0":198,"PathEltOrInverse":199,"PathElt":200,"PathPrimary":201,"PathElt_option0":202,"PathEltOrInverse_option0":203,"!":204,"PathNegatedPropertySet":205,"PathOneInPropertySet":206,"PathNegatedPropertySet_repetition0":207,"PathNegatedPropertySet_option0":208,"^":209,"TriplesNode_repetition_plus0":210,"[":211,"]":212,"TriplesNodePath_repetition_plus0":213,"BLANK_NODE_LABEL":214,"ANON":215,"Expression_repetition0":216,"ConditionalAndExpression":217,"ConditionalAndExpression_repetition0":218,"RelationalExpression":219,"AdditiveExpression":220,"RelationalExpression_group0":221,"RelationalExpression_option0":222,"IN":223,"MultiplicativeExpression":224,"AdditiveExpression_repetition0":225,"AdditiveExpressionTail":226,"AdditiveExpressionTail_group0":227,"NumericLiteralPositive":228,"AdditiveExpressionTail_repetition0":229,"NumericLiteralNegative":230,"AdditiveExpressionTail_repetition1":231,"UnaryExpression":232,"MultiplicativeExpression_repetition0":233,"MultiplicativeExpressionTail":234,"MultiplicativeExpressionTail_group0":235,"UnaryExpression_option0":236,"PrimaryExpression":237,"-":238,"Aggregate":239,"FUNC_ARITY0":240,"FUNC_ARITY1":241,"FUNC_ARITY2":242,",":243,"IF":244,"BuiltInCall_group0":245,"BOUND":246,"BNODE":247,"BuiltInCall_option0":248,"EXISTS":249,"COUNT":250,"Aggregate_option0":251,"Aggregate_group0":252,"FUNC_AGGREGATE":253,"Aggregate_option1":254,"GROUP_CONCAT":255,"Aggregate_option2":256,"Aggregate_option3":257,"GroupConcatSeparator":258,"SEPARATOR":259,"=":260,"String":261,"LANGTAG":262,"^^":263,"DECIMAL":264,"DOUBLE":265,"true":266,"false":267,"STRING_LITERAL1":268,"STRING_LITERAL2":269,"STRING_LITERAL_LONG1":270,"STRING_LITERAL_LONG2":271,"INTEGER_POSITIVE":272,"DECIMAL_POSITIVE":273,"DOUBLE_POSITIVE":274,"INTEGER_NEGATIVE":275,"DECIMAL_NEGATIVE":276,"DOUBLE_NEGATIVE":277,"PNAME_LN":278,"QueryOrUpdateUnit_repetition0_group0":279,"SelectClause_option0_group0":280,"DISTINCT":281,"REDUCED":282,"SelectClause_group0_repetition_plus0":283,"*":284,"DescribeQuery_group0_repetition_plus0_group0":285,"DescribeQuery_group0_repetition_plus0":286,"NAMED":287,"SILENT":288,"CLEAR":289,"DROP":290,"ADD":291,"MOVE":292,"COPY":293,"ALL":294,".":295,"UNION":296,"PropertyListNotEmpty_repetition0_repetition_plus0":297,"|":298,"/":299,"PathElt_option0_group0":300,"?":301,"+":302,"||":303,"&&":304,"!=":305,"<":306,">":307,"<=":308,">=":309,"NOT":310,"CONCAT":311,"COALESCE":312,"SUBSTR":313,"REGEX":314,"REPLACE":315,"$accept":0,"$end":1},
terminals_: {2:"error",6:"EOF",11:"BASE",12:"IRIREF",14:"PREFIX",15:"PNAME_NS",23:"SELECT",27:"VAR",28:"(",30:"AS",31:")",33:"CONSTRUCT",37:"WHERE",38:"{",40:"}",42:"DESCRIBE",47:"ASK",50:"FROM",60:"GROUP",61:"BY",67:"HAVING",70:"ORDER",73:"ASC",75:"DESC",78:"LIMIT",79:"INTEGER",80:"OFFSET",82:"VALUES",90:"UNDEF",96:"LOAD",105:"TO",106:"CREATE",108:"GRAPH",109:"INSERTDATA",111:"DELETEDATA",112:"DELETEWHERE",121:"DELETE",122:"INSERT",124:"USING",127:"WITH",129:"INTO",130:"DEFAULT",156:"OPTIONAL",157:"MINUS",159:"SERVICE",162:"FILTER",163:"BIND",164:"NIL",182:"a",193:";",204:"!",209:"^",211:"[",212:"]",214:"BLANK_NODE_LABEL",215:"ANON",223:"IN",238:"-",240:"FUNC_ARITY0",241:"FUNC_ARITY1",242:"FUNC_ARITY2",243:",",244:"IF",246:"BOUND",247:"BNODE",249:"EXISTS",250:"COUNT",253:"FUNC_AGGREGATE",255:"GROUP_CONCAT",259:"SEPARATOR",260:"=",262:"LANGTAG",263:"^^",264:"DECIMAL",265:"DOUBLE",266:"true",267:"false",268:"STRING_LITERAL1",269:"STRING_LITERAL2",270:"STRING_LITERAL_LONG1",271:"STRING_LITERAL_LONG2",272:"INTEGER_POSITIVE",273:"DECIMAL_POSITIVE",274:"DOUBLE_POSITIVE",275:"INTEGER_NEGATIVE",276:"DECIMAL_NEGATIVE",277:"DOUBLE_NEGATIVE",278:"PNAME_LN",281:"DISTINCT",282:"REDUCED",284:"*",287:"NAMED",288:"SILENT",289:"CLEAR",290:"DROP",291:"ADD",292:"MOVE",293:"COPY",294:"ALL",295:".",296:"UNION",298:"|",299:"/",301:"?",302:"+",303:"||",304:"&&",305:"!=",306:"<",307:">",308:"<=",309:">=",310:"NOT",311:"CONCAT",312:"COALESCE",313:"SUBSTR",314:"REGEX",315:"REPLACE"},
productions_: [0,[3,3],[7,2],[10,2],[13,3],[16,4],[21,4],[17,3],[26,1],[26,5],[32,5],[32,7],[41,5],[46,4],[49,3],[19,2],[20,4],[59,3],[63,1],[63,1],[63,3],[63,5],[63,1],[66,2],[69,3],[72,2],[72,2],[72,1],[72,1],[77,2],[77,2],[77,4],[77,4],[81,2],[84,2],[83,4],[83,6],[88,1],[88,1],[88,1],[91,3],[93,2],[95,4],[95,3],[95,5],[95,4],[95,2],[95,2],[95,2],[95,6],[95,6],[118,2],[114,2],[123,3],[126,2],[128,3],[104,1],[104,2],[101,2],[101,1],[110,4],[135,7],[140,3],[54,3],[54,3],[144,2],[147,3],[151,3],[148,2],[148,2],[148,2],[148,3],[148,4],[148,2],[148,6],[148,1],[76,1],[76,1],[76,1],[65,2],[65,6],[167,1],[167,4],[34,3],[170,3],[142,2],[142,2],[176,1],[174,2],[179,2],[180,1],[180,1],[180,1],[181,2],[153,2],[153,2],[185,4],[192,1],[192,3],[195,2],[197,2],[200,2],[199,2],[201,1],[201,1],[201,2],[201,3],[205,1],[205,1],[205,4],[206,1],[206,1],[206,2],[206,2],[175,3],[175,3],[186,3],[186,3],[184,1],[184,1],[190,1],[190,1],[173,1],[173,1],[173,1],[173,1],[173,1],[173,1],[29,2],[217,2],[219,1],[219,3],[219,4],[220,2],[226,2],[226,2],[226,2],[224,2],[234,2],[232,2],[232,2],[232,2],[237,1],[237,1],[237,1],[237,1],[237,1],[237,1],[74,3],[64,1],[64,2],[64,4],[64,6],[64,8],[64,2],[64,4],[64,2],[64,4],[64,3],[239,5],[239,5],[239,6],[258,4],[89,1],[89,2],[89,3],[89,1],[89,1],[89,1],[89,1],[89,1],[89,1],[89,1],[261,1],[261,1],[261,1],[261,1],[228,1],[228,1],[228,1],[230,1],[230,1],[230,1],[52,1],[52,1],[52,1],[279,1],[279,1],[4,0],[4,2],[5,1],[5,1],[8,1],[8,1],[8,1],[8,1],[9,0],[9,1],[18,0],[18,2],[22,0],[22,1],[280,1],[280,1],[24,0],[24,1],[283,1],[283,2],[25,1],[25,1],[35,0],[35,2],[36,0],[36,2],[39,0],[39,1],[285,1],[285,1],[286,1],[286,2],[43,1],[43,1],[44,0],[44,2],[45,0],[45,1],[48,0],[48,2],[51,0],[51,1],[53,0],[53,1],[55,0],[55,1],[56,0],[56,1],[57,0],[57,1],[58,0],[58,1],[62,1],[62,2],[68,1],[68,2],[71,1],[71,2],[85,0],[85,2],[86,0],[86,2],[87,0],[87,2],[92,0],[92,2],[94,0],[94,3],[97,0],[97,1],[98,0],[98,1],[99,1],[99,1],[100,0],[100,1],[102,1],[102,1],[102,1],[103,0],[103,1],[107,0],[107,1],[113,0],[113,1],[115,0],[115,1],[116,0],[116,2],[117,0],[117,1],[119,0],[119,1],[120,0],[120,2],[125,0],[125,1],[131,0],[131,1],[132,1],[132,1],[132,1],[133,0],[133,1],[134,0],[134,2],[136,1],[136,1],[137,0],[137,1],[138,0],[138,1],[139,0],[139,1],[141,0],[141,3],[143,0],[143,1],[145,0],[145,1],[146,0],[146,2],[149,0],[149,1],[150,0],[150,1],[152,0],[152,3],[154,0],[154,1],[155,0],[155,3],[158,1],[158,1],[160,0],[160,1],[161,1],[161,1],[165,0],[165,1],[166,0],[166,3],[168,0],[168,3],[169,0],[169,1],[171,0],[171,3],[172,0],[172,1],[177,0],[177,1],[297,1],[297,2],[178,0],[178,3],[183,0],[183,3],[187,0],[187,1],[188,1],[188,1],[189,0],[189,3],[191,0],[191,2],[194,1],[194,1],[196,0],[196,3],[198,0],[198,3],[300,1],[300,1],[300,1],[202,0],[202,1],[203,0],[203,1],[207,0],[207,3],[208,0],[208,1],[210,1],[210,2],[213,1],[213,2],[216,0],[216,3],[218,0],[218,3],[221,1],[221,1],[221,1],[221,1],[221,1],[221,1],[222,0],[222,1],[225,0],[225,2],[227,1],[227,1],[229,0],[229,2],[231,0],[231,2],[233,0],[233,2],[235,1],[235,1],[236,0],[236,1],[245,1],[245,1],[245,1],[245,1],[245,1],[248,0],[248,1],[251,0],[251,1],[252,1],[252,1],[254,0],[254,1],[256,0],[256,1],[257,0],[257,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      $$[$0-1].prefixes = Parser.prefixes;
      Parser.prefixes = null;
      base = basePath = baseRoot = '';
      return $$[$0-1];
    
break;
case 2:
this.$ = extend({ type: 'query' }, $$[$0-1], $$[$0]);
break;
case 3:

      base = resolveIRI($$[$0])
      basePath = base.replace(/[^\/]*$/, '');
      baseRoot = base.match(/^(?:[a-z]+:\/*)?[^\/]*/)[0];
    
break;
case 4:

      if (!Parser.prefixes) Parser.prefixes = {};
      $$[$0-1] = $$[$0-1].substr(0, $$[$0-1].length - 1);
      $$[$0] = resolveIRI($$[$0]);
      Parser.prefixes[$$[$0-1]] = $$[$0];
    
break;
case 5:
this.$ = extend($$[$0-3], groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 6:
this.$ = extend({ type: 'query' }, $$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 7:
this.$ = extend({ queryType: 'SELECT', variables: $$[$0] === '*' ? ['*'] : $$[$0] }, $$[$0-1] && ($$[$0-2] = lowercase($$[$0-1]), $$[$0-1] = {}, $$[$0-1][$$[$0-2]] = true, $$[$0-1]));
break;
case 8: case 90: case 122: case 147:
this.$ = toVar($$[$0]);
break;
case 9: case 21:
this.$ = expression($$[$0-3], { variable: toVar($$[$0-1]) });
break;
case 10:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-3] }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 11:
this.$ = extend({ queryType: 'CONSTRUCT', template: $$[$0-2] = ($$[$0-2] ? $$[$0-2].triples : []) }, groupDatasets($$[$0-5]), { where: [ { type: 'bgp', triples: appendAllTo([], $$[$0-2]) } ] }, $$[$0]);
break;
case 12:
this.$ = extend({ queryType: 'DESCRIBE', variables: $$[$0-3] === '*' ? ['*'] : $$[$0-3].map(toVar) }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 13:
this.$ = extend({ queryType: 'ASK' }, groupDatasets($$[$0-2]), $$[$0-1], $$[$0]);
break;
case 14: case 53:
this.$ = { iri: $$[$0], named: !!$$[$0-1] };
break;
case 15:
this.$ = { where: $$[$0].patterns };
break;
case 16:
this.$ = extend($$[$0-3], $$[$0-2], $$[$0-1], $$[$0]);
break;
case 17:
this.$ = { group: $$[$0] };
break;
case 18: case 19: case 25: case 27:
this.$ = expression($$[$0]);
break;
case 20:
this.$ = expression($$[$0-1]);
break;
case 22: case 28:
this.$ = expression(toVar($$[$0]));
break;
case 23:
this.$ = { having: $$[$0] };
break;
case 24:
this.$ = { order: $$[$0] };
break;
case 26:
this.$ = expression($$[$0], { descending: true });
break;
case 29:
this.$ = { limit:  toInt($$[$0]) };
break;
case 30:
this.$ = { offset: toInt($$[$0]) };
break;
case 31:
this.$ = { limit: toInt($$[$0-2]), offset: toInt($$[$0]) };
break;
case 32:
this.$ = { limit: toInt($$[$0]), offset: toInt($$[$0-2]) };
break;
case 33:
this.$ = { values: $$[$0] };
break;
case 34:
this.$ = { type: 'values', values: $$[$0] };
break;
case 35:

      $$[$0-3] = toVar($$[$0-3]);
      this.$ = $$[$0-1].map(function(v) { var o = {}; o[$$[$0-3]] = v; return o; })
    
break;
case 36:

      var length = $$[$0-4].length;
      $$[$0-4] = $$[$0-4].map(toVar);
      this.$ = $$[$0-1].map(function (values) {
        if (values.length !== length)
          throw Error('Inconsistent VALUES length');
        var valuesObject = {};
        for(var i = 0; i<length; i++)
          valuesObject[$$[$0-4][i]] = values[i];
        return valuesObject;
      });
    
break;
case 39:
this.$ = undefined;
break;
case 40: case 63: case 83: case 106: case 148:
this.$ = $$[$0-1];
break;
case 41:
this.$ = { type: 'update', updates: appendTo($$[$0-1], $$[$0]) };
break;
case 42:
this.$ = extend({ type: 'load', silent: !!$$[$0-2], source: $$[$0-1] }, $$[$0] && { destination: $$[$0] });
break;
case 43:
this.$ = { type: lowercase($$[$0-2]), silent: !!$$[$0-1], graph: $$[$0] };
break;
case 44:
this.$ = { type: lowercase($$[$0-4]), silent: !!$$[$0-3], source: $$[$0-2], destination: $$[$0] };
break;
case 45:
this.$ = { type: 'create', silent: !!$$[$0-2], graph: $$[$0-1] };
break;
case 46:
this.$ = { updateType: 'insert',      insert: $$[$0] };
break;
case 47:
this.$ = { updateType: 'delete',      delete: $$[$0] };
break;
case 48:
this.$ = { updateType: 'deletewhere', delete: $$[$0] };
break;
case 49:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { insert: $$[$0-4] || [] }, { delete: $$[$0-3] || [] }, groupDatasets($$[$0-2]), { where: $$[$0].patterns });
break;
case 50:
this.$ = extend({ updateType: 'insertdelete' }, $$[$0-5], { delete: $$[$0-4] || [] }, { insert: $$[$0-3] || [] }, groupDatasets($$[$0-2]), { where: $$[$0].patterns });
break;
case 51: case 52: case 55: case 139:
this.$ = $$[$0];
break;
case 54:
this.$ = { graph: $$[$0] };
break;
case 56:
this.$ = { type: 'graph', default: true };
break;
case 57: case 58:
this.$ = { type: 'graph', name: $$[$0] };
break;
case 59:
 this.$ = {}; this.$[lowercase($$[$0])] = true; 
break;
case 60:
this.$ = $$[$0-2] ? unionAll($$[$0-1], [$$[$0-2]]) : unionAll($$[$0-1]);
break;
case 61:

      var graph = extend($$[$0-3] || { triples: [] }, { type: 'graph', name: toVar($$[$0-5]) });
      this.$ = $$[$0] ? [graph, $$[$0]] : [graph];
    
break;
case 62: case 67:
this.$ = { type: 'bgp', triples: unionAll($$[$0-2], [$$[$0-1]]) };
break;
case 64:

      // Simplify the groups by merging adjacent BGPs and moving filters to the back
      if ($$[$0-1].length > 1) {
        var groups = [], currentBgp, filters = [];
        for (var i = 0, group; group=$$[$0-1][i]; i++) {
          switch (group.type) {
            // Add a BGP's triples to the current BGP
            case 'bgp':
              if (group.triples.length) {
                if (!currentBgp)
                  appendTo(groups, currentBgp = group);
                else
                  appendAllTo(currentBgp.triples, group.triples);
              }
              break;
            // Save filters separately
            case 'filter':
              appendTo(filters, group);
              break;
            // All other groups break up a BGP
            default:
              // Only add the group if its pattern is non-empty
              if (!group.patterns || group.patterns.length > 0) {
                appendTo(groups, group);
                currentBgp = null;
              }
          }
        }
        $$[$0-1] = appendAllTo(groups, filters);
      }
      this.$ = { type: 'group', patterns: $$[$0-1] }
    
break;
case 65:
this.$ = $$[$0-1] ? unionAll([$$[$0-1]], $$[$0]) : unionAll($$[$0]);
break;
case 66:
this.$ = $$[$0] ? [$$[$0-2], $$[$0]] : $$[$0-2];
break;
case 68:
this.$ = $$[$0-1].length ? { type: 'union', patterns: unionAll($$[$0-1].map(degroupSingle), [degroupSingle($$[$0])]) } : degroupSingle($$[$0]);
break;
case 69:
this.$ = extend($$[$0], { type: 'optional' });
break;
case 70:
this.$ = extend($$[$0], { type: 'minus' });
break;
case 71:
this.$ = extend($$[$0], { type: 'graph', name: toVar($$[$0-1]) });
break;
case 72:
this.$ = extend($$[$0], { type: 'service', name: toVar($$[$0-1]), silent: !!$$[$0-2] });
break;
case 73:
this.$ = { type: 'filter', expression: $$[$0] };
break;
case 74:
this.$ = { type: 'bind', variable: toVar($$[$0-1]), expression: $$[$0-3] };
break;
case 79:
this.$ = { type: 'functionCall', function: $$[$0-1], args: [] };
break;
case 80:
this.$ = { type: 'functionCall', function: $$[$0-5], args: appendTo($$[$0-2], $$[$0-1]), distinct: !!$$[$0-3] };
break;
case 81: case 97: case 108: case 188: case 198: case 210: case 212: case 222: case 226: case 246: case 248: case 250: case 252: case 254: case 275: case 281: case 292: case 302: case 308: case 314: case 318: case 328: case 330: case 334: case 342: case 344: case 350: case 352: case 356: case 358: case 367: case 375: case 377: case 387: case 391: case 393: case 395:
this.$ = [];
break;
case 82:
this.$ = appendTo($$[$0-2], $$[$0-1]);
break;
case 84:
this.$ = unionAll($$[$0-2], [$$[$0-1]]);
break;
case 85: case 94:
this.$ = $$[$0].map(function (t) { return extend(triple($$[$0-1]), t); });
break;
case 86:
this.$ = appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 88:
this.$ = unionAll($$[$0-1], [$$[$0]]);
break;
case 89:
this.$ = objectListToTriples($$[$0-1], $$[$0]);
break;
case 92: case 104: case 111:
this.$ = RDF_TYPE;
break;
case 93:
this.$ = appendTo($$[$0-1], $$[$0]);
break;
case 95:
this.$ = !$$[$0] ? $$[$0-1].triples : appendAllTo($$[$0].map(function (t) { return extend(triple($$[$0-1].entity), t); }), $$[$0-1].triples) /* the subject is a blank node, possibly with more triples */;
break;
case 96:
this.$ = objectListToTriples(toVar($$[$0-3]), appendTo($$[$0-2], $$[$0-1]), $$[$0]);
break;
case 98:
this.$ = objectListToTriples(toVar($$[$0-1]), $$[$0]);
break;
case 99:
this.$ = $$[$0-1].length ? path('|',appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 100:
this.$ = $$[$0-1].length ? path('/', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 101:
this.$ = $$[$0] ? path($$[$0], [$$[$0-1]]) : $$[$0-1];
break;
case 102:
this.$ = $$[$0-1] ? path($$[$0-1], [$$[$0]]) : $$[$0];;
break;
case 105: case 112:
this.$ = path($$[$0-1], [$$[$0]]);
break;
case 109:
this.$ = path('|', appendTo($$[$0-2], $$[$0-1]));
break;
case 113:
this.$ = path($$[$0-1], [RDF_TYPE]);
break;
case 114: case 116:
this.$ = createList($$[$0-1]);
break;
case 115: case 117:
this.$ = createAnonymousObject($$[$0-1]);
break;
case 118:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNode */;
break;
case 120:
this.$ = { entity: $$[$0], triples: [] } /* for consistency with TriplesNodePath */;
break;
case 126:
this.$ = blank();
break;
case 127:
this.$ = RDF_NIL;
break;
case 128:
this.$ = $$[$0-1].length ? operation('||', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 129:
this.$ = $$[$0-1].length ? operation('&&', appendTo($$[$0-1], $$[$0])) : $$[$0];
break;
case 131:
this.$ = operation($$[$0-1], [$$[$0-2], $$[$0]]);
break;
case 132:
this.$ = operation($$[$0-2] ? 'notin' : 'in', [$$[$0-3], $$[$0]]);
break;
case 133: case 137:
this.$ = createOperationTree($$[$0-1], $$[$0]);
break;
case 134: case 138:
this.$ = [$$[$0-1], $$[$0]];
break;
case 135:
this.$ = ['+', createOperationTree($$[$0-1], $$[$0])];
break;
case 136:
this.$ = ['-', createOperationTree($$[$0-1].replace('-', ''), $$[$0])];
break;
case 140:
this.$ = operation($$[$0-1], [$$[$0]]);
break;
case 141:
this.$ = operation('UMINUS', [$$[$0]]);
break;
case 150:
this.$ = operation(lowercase($$[$0-1]));
break;
case 151:
this.$ = operation(lowercase($$[$0-3]), [$$[$0-1]]);
break;
case 152:
this.$ = operation(lowercase($$[$0-5]), [$$[$0-3], $$[$0-1]]);
break;
case 153:
this.$ = operation(lowercase($$[$0-7]), [$$[$0-5], $$[$0-3], $$[$0-1]]);
break;
case 154:
this.$ = operation(lowercase($$[$0-1]), $$[$0]);
break;
case 155:
this.$ = operation('bound', [toVar($$[$0-1])]);
break;
case 156:
this.$ = operation($$[$0-1], []);
break;
case 157:
this.$ = operation($$[$0-3], [$$[$0-1]]);
break;
case 158:
this.$ = operation($$[$0-2] ? 'notexists' :'exists', [degroupSingle($$[$0])]);
break;
case 159: case 160:
this.$ = expression($$[$0-1], { type: 'aggregate', aggregation: lowercase($$[$0-4]), distinct: !!$$[$0-2] });
break;
case 161:
this.$ = expression($$[$0-2], { type: 'aggregate', aggregation: lowercase($$[$0-5]), distinct: !!$$[$0-3], separator: $$[$0-1] || ' ' });
break;
case 162:
this.$ = $$[$0].substr(1, $$[$0].length - 2);
break;
case 164:
this.$ = $$[$0-1] + lowercase($$[$0]);
break;
case 165:
this.$ = $$[$0-2] + '^^' + $$[$0];
break;
case 166: case 180:
this.$ = createLiteral($$[$0], XSD_INTEGER);
break;
case 167: case 181:
this.$ = createLiteral($$[$0], XSD_DECIMAL);
break;
case 168: case 182:
this.$ = createLiteral(lowercase($$[$0]), XSD_DOUBLE);
break;
case 171:
this.$ = XSD_TRUE;
break;
case 172:
this.$ = XSD_FALSE;
break;
case 173: case 174:
this.$ = unescapeString($$[$0], 1);
break;
case 175: case 176:
this.$ = unescapeString($$[$0], 3);
break;
case 177:
this.$ = createLiteral($$[$0].substr(1), XSD_INTEGER);
break;
case 178:
this.$ = createLiteral($$[$0].substr(1), XSD_DECIMAL);
break;
case 179:
this.$ = createLiteral($$[$0].substr(1).toLowerCase(), XSD_DOUBLE);
break;
case 183:
this.$ = resolveIRI($$[$0]);
break;
case 184:

      var namePos = $$[$0].indexOf(':'),
          prefix = $$[$0].substr(0, namePos),
          expansion = Parser.prefixes[prefix];
      if (!expansion) throw new Error('Unknown prefix: ' + prefix);
      this.$ = resolveIRI(expansion + $$[$0].substr(namePos + 1));
    
break;
case 185:

      $$[$0] = $$[$0].substr(0, $$[$0].length - 1);
      if (!($$[$0] in Parser.prefixes)) throw new Error('Unknown prefix: ' + $$[$0]);
      this.$ = resolveIRI(Parser.prefixes[$$[$0]]);
    
break;
case 189: case 199: case 207: case 211: case 213: case 219: case 223: case 227: case 241: case 243: case 245: case 247: case 249: case 251: case 253: case 276: case 282: case 293: case 309: case 341: case 353: case 372: case 374: case 388: case 392: case 394: case 396:
$$[$0-1].push($$[$0]);
break;
case 206: case 218: case 240: case 242: case 244: case 340: case 371: case 373:
this.$ = [$$[$0]];
break;
case 255: case 303: case 315: case 319: case 329: case 331: case 335: case 343: case 345: case 351: case 357: case 359: case 368: case 376: case 378:
$$[$0-2].push($$[$0-1]);
break;
}
},
table: [o($V0,[2,188],{3:1,4:2}),{1:[3]},o($V1,[2,254],{5:3,279:4,7:5,93:6,10:7,13:8,8:9,94:10,16:13,32:14,41:15,46:16,17:17,11:[1,11],14:[1,12],23:$V2,33:[1,18],42:[1,19],47:[1,20]}),{6:[1,22]},o($V0,[2,189]),{6:[2,190]},{6:[2,191]},o($V0,[2,186]),o($V0,[2,187]),{6:[2,196],9:23,81:24,82:$V3},{95:26,96:[1,27],99:28,102:29,106:[1,30],109:[1,31],111:[1,32],112:[1,33],113:34,117:35,121:[2,277],122:[2,271],126:41,127:[1,42],289:[1,36],290:[1,37],291:[1,38],292:[1,39],293:[1,40]},{12:[1,43]},{15:[1,44]},o($V4,[2,192]),o($V4,[2,193]),o($V4,[2,194]),o($V4,[2,195]),o($V5,[2,198],{18:45}),o($V6,[2,212],{34:46,36:47,38:[1,48]}),{12:$V7,15:$V8,27:$V9,43:49,52:54,278:$Va,284:[1,51],285:52,286:50},o($V5,[2,226],{48:58}),o($Vb,[2,204],{24:59,280:60,281:[1,61],282:[1,62]}),{1:[2,1]},{6:[2,2]},{6:[2,197]},{27:$Vc,28:$Vd,83:63},{6:[2,41],193:[1,66]},o($Ve,[2,256],{97:67,288:[1,68]}),o($Vf,[2,262],{100:69,288:[1,70]}),o($Vg,[2,267],{103:71,288:[1,72]}),{107:73,108:[2,269],288:[1,74]},{38:$Vh,110:75},{38:$Vh,110:77},{38:$Vh,110:78},{114:79,122:$Vi},{118:81,121:$Vj},o($Vk,[2,260]),o($Vk,[2,261]),o($Vl,[2,264]),o($Vl,[2,265]),o($Vl,[2,266]),{121:[2,278],122:[2,272]},{12:$V7,15:$V8,52:83,278:$Va},o($V0,[2,3]),{12:[1,84]},{19:85,37:$Vm,38:$Vn,49:86,50:$Vo,53:87},o($V5,[2,210],{35:90}),{37:[1,91],49:92,50:$Vo},o($Vp,[2,334],{169:93,170:94,171:95,40:[2,332]}),o($Vq,[2,222],{44:96}),o($Vq,[2,220],{52:54,285:97,12:$V7,15:$V8,27:$V9,278:$Va}),o($Vq,[2,221]),o($Vr,[2,218]),o($Vr,[2,216]),o($Vr,[2,217]),o($Vs,[2,183]),o($Vs,[2,184]),o($Vs,[2,185]),{19:98,37:$Vm,38:$Vn,49:99,50:$Vo,53:87},{25:100,26:103,27:$Vt,28:$Vu,283:101,284:[1,102]},o($Vb,[2,205]),o($Vb,[2,202]),o($Vb,[2,203]),o([6,40],[2,33]),{38:[1,106]},o($Vv,[2,248],{86:107}),o($V1,[2,255]),{12:$V7,15:$V8,52:108,278:$Va},o($Ve,[2,257]),{101:109,108:[1,110],130:[1,112],132:111,287:[1,113],294:[1,114]},o($Vf,[2,263]),o($Ve,$Vw,{104:115,131:117,108:$Vx,130:$Vy}),o($Vg,[2,268]),{108:[1,119]},{108:[2,270]},o($Vz,[2,46]),o($Vp,$VA,{133:120,140:121,141:122,40:$VB,108:$VB}),o($Vz,[2,47]),o($Vz,[2,48]),o($VC,[2,273],{115:123,118:124,121:$Vj}),{38:$Vh,110:125},o($VC,[2,279],{119:126,114:127,122:$Vi}),{38:$Vh,110:128},o([121,122],[2,54]),o($V0,[2,4]),o($VD,$VE,{20:129,55:130,59:131,60:$VF}),o($V5,[2,199]),{38:$VG,54:133},o($Ve,[2,228],{51:135,287:[1,136]}),{38:[2,231]},{19:137,37:$Vm,38:$Vn,49:138,50:$Vo,53:87},{38:[1,139]},o($V6,[2,213]),{40:[1,140]},{40:[2,333]},{12:$V7,15:$V8,27:$VH,28:$VI,52:145,79:$VJ,89:146,142:141,164:$VK,173:142,175:143,211:$VL,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($V01,[2,224],{53:87,45:170,49:171,19:172,37:$Vm,38:$Vn,50:$Vo}),o($Vr,[2,219]),o($VD,$VE,{55:130,59:131,20:173,60:$VF}),o($V5,[2,227]),o($V5,[2,7]),o($V5,[2,208],{26:174,27:$Vt,28:$Vu}),o($V5,[2,209]),o($V11,[2,206]),o($V11,[2,8]),o($V21,$V31,{29:175,216:176}),o($V41,[2,246],{85:177}),{27:[1,179],31:[1,178]},o($Vz,[2,258],{98:180,128:181,129:[1,182]}),o($Vz,[2,43]),{12:$V7,15:$V8,52:183,278:$Va},o($Vz,[2,59]),o($Vz,[2,287]),o($Vz,[2,288]),o($Vz,[2,289]),{105:[1,184]},o($V51,[2,56]),{12:$V7,15:$V8,52:185,278:$Va},o($Ve,[2,286]),{12:$V7,15:$V8,52:186,278:$Va},o($V61,[2,292],{134:187}),o($V61,[2,291]),{12:$V7,15:$V8,27:$VH,28:$VI,52:145,79:$VJ,89:146,142:188,164:$VK,173:142,175:143,211:$VL,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($VC,[2,275],{116:189}),o($VC,[2,274]),o([37,121,124],[2,52]),o($VC,[2,281],{120:190}),o($VC,[2,280]),o([37,122,124],[2,51]),o($V4,[2,5]),o($V71,[2,234],{56:191,66:192,67:[1,193]}),o($VD,[2,233]),{61:[1,194]},o([6,40,60,67,70,78,80,82],[2,15]),o($Vp,$V81,{21:195,144:196,17:197,145:198,151:199,152:200,23:$V2,38:$V91,40:$V91,82:$V91,108:$V91,156:$V91,157:$V91,159:$V91,162:$V91,163:$V91}),{12:$V7,15:$V8,52:201,278:$Va},o($Ve,[2,229]),o($VD,$VE,{55:130,59:131,20:202,60:$VF}),o($V5,[2,211]),o($Vp,$VA,{141:122,39:203,140:204,40:[2,214]}),o($V5,[2,83]),{40:[2,336],172:205,295:[1,206]},o($Va1,$Vb1,{174:207,178:208}),o($Va1,$Vb1,{178:208,176:209,177:210,174:211,40:$Vc1,108:$Vc1,295:$Vc1}),o($Vd1,[2,122]),o($Vd1,[2,123]),o($Vd1,[2,124]),o($Vd1,[2,125]),o($Vd1,[2,126]),o($Vd1,[2,127]),{12:$V7,15:$V8,27:$VH,28:$VI,52:145,79:$VJ,89:146,164:$VK,173:214,175:215,184:213,210:212,211:$VL,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($Va1,$Vb1,{178:208,174:216}),o($Ve1,[2,163],{262:[1,217],263:[1,218]}),o($Ve1,[2,166]),o($Ve1,[2,167]),o($Ve1,[2,168]),o($Ve1,[2,169]),o($Ve1,[2,170]),o($Ve1,[2,171]),o($Ve1,[2,172]),o($Vf1,[2,173]),o($Vf1,[2,174]),o($Vf1,[2,175]),o($Vf1,[2,176]),o($Ve1,[2,177]),o($Ve1,[2,178]),o($Ve1,[2,179]),o($Ve1,[2,180]),o($Ve1,[2,181]),o($Ve1,[2,182]),o($VD,$VE,{55:130,59:131,20:219,60:$VF}),o($Vq,[2,223]),o($V01,[2,225]),o($V4,[2,13]),o($V11,[2,207]),{30:[1,220]},o($V21,[2,377],{217:221,218:222}),{12:$V7,15:$V8,40:[1,223],52:225,79:$VJ,88:224,89:226,90:$Vg1,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},{38:[1,228]},o($Vv,[2,249]),o($Vz,[2,42]),o($Vz,[2,259]),{108:[1,229]},o($Vz,[2,58]),o($Ve,$Vw,{131:117,104:230,108:$Vx,130:$Vy}),o($V51,[2,57]),o($Vz,[2,45]),{40:[1,231],108:[1,233],135:232},o($V61,[2,304],{143:234,295:[1,235]}),{37:[1,236],123:237,124:$Vh1},{37:[1,239],123:240,124:$Vh1},o($Vi1,[2,236],{57:241,69:242,70:[1,243]}),o($V71,[2,235]),{12:$V7,15:$V8,28:$Vj1,52:259,64:247,65:248,68:244,74:246,76:245,239:250,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,245:255,246:$Vo1,247:$Vp1,248:258,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1},{12:$V7,15:$V8,27:$VA1,28:$VB1,52:259,62:269,63:270,64:271,65:272,239:250,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,245:255,246:$Vo1,247:$Vp1,248:258,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1},{40:[1,275]},{40:[1,276]},{19:277,37:$Vm,38:$Vn,53:87},o($VC1,[2,308],{146:278}),o($VC1,[2,307]),{12:$V7,15:$V8,27:$VH,28:$VD1,52:145,79:$VJ,89:146,153:279,164:$VK,173:280,186:281,211:$VE1,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($Vq,[2,14]),o($V4,[2,10]),{40:[1,284]},{40:[2,215]},{40:[2,84]},o($Vp,[2,335],{40:[2,337]}),o($VF1,[2,85]),{12:$V7,15:$V8,27:[1,287],52:288,179:285,180:286,182:[1,289],278:$Va},o($VF1,[2,86]),o($VF1,[2,87]),o($VF1,[2,339]),{12:$V7,15:$V8,27:$VH,28:$VI,31:[1,290],52:145,79:$VJ,89:146,164:$VK,173:214,175:215,184:291,211:$VL,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($VG1,[2,371]),o($VH1,[2,118]),o($VH1,[2,119]),{212:[1,292]},o($Ve1,[2,164]),{12:$V7,15:$V8,52:293,278:$Va},o($V4,[2,12]),{27:[1,294]},o([30,31,193,243],[2,128],{303:[1,295]}),o($VI1,$VJ1,{219:296,220:297,224:298,232:299,236:300,204:$VK1,238:$VL1,302:$VM1}),o($VN1,[2,35]),o($V41,[2,247]),o($VO1,[2,37]),o($VO1,[2,38]),o($VO1,[2,39]),o($VP1,[2,250],{87:304}),{12:$V7,15:$V8,52:305,278:$Va},o($Vz,[2,44]),o([6,37,121,122,124,193],[2,60]),o($V61,[2,293]),{12:$V7,15:$V8,27:[1,307],52:308,136:306,278:$Va},o($V61,[2,62]),o($Vp,[2,303],{40:$VQ1,108:$VQ1}),{38:$VG,54:309},o($VC,[2,276]),o($Ve,[2,283],{125:310,287:[1,311]}),{38:$VG,54:312},o($VC,[2,282]),o($VR1,[2,238],{58:313,77:314,78:[1,315],80:[1,316]}),o($Vi1,[2,237]),{61:[1,317]},o($V71,[2,23],{74:246,64:247,65:248,239:250,245:255,248:258,52:259,76:318,12:$V7,15:$V8,28:$Vj1,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,246:$Vo1,247:$Vp1,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1}),o($VS1,[2,242]),o($VT1,[2,76]),o($VT1,[2,77]),o($VT1,[2,78]),o($V21,$V31,{216:176,29:319}),o($VU1,[2,149]),{164:[1,320]},{28:[1,321]},{28:[1,322]},{28:[1,323]},{28:$VV1,164:$VW1,167:324},{28:[1,327]},{28:[1,329],164:[1,328]},{249:[1,330]},{28:$VX1,164:$VY1},{28:[1,333]},{28:[1,334]},{28:[1,335]},o($VZ1,[2,401]),o($VZ1,[2,402]),o($VZ1,[2,403]),o($VZ1,[2,404]),o($VZ1,[2,405]),{249:[2,407]},o($VD,[2,17],{239:250,245:255,248:258,52:259,64:271,65:272,63:336,12:$V7,15:$V8,27:$VA1,28:$VB1,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,246:$Vo1,247:$Vp1,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1}),o($V_1,[2,240]),o($V_1,[2,18]),o($V_1,[2,19]),o($V21,$V31,{216:176,29:337}),o($V_1,[2,22]),o($V$1,[2,63]),o($V$1,[2,64]),o($VD,$VE,{55:130,59:131,20:338,60:$VF}),{38:[2,318],40:[2,65],82:[1,349],84:348,108:[1,344],147:339,148:340,155:341,156:[1,342],157:[1,343],159:[1,345],162:[1,346],163:[1,347]},o($VC1,[2,316],{154:350,295:[1,351]}),o($V02,$V12,{185:352,188:353,195:354,196:356,27:$V22}),o($V32,[2,346],{188:353,195:354,196:356,187:357,185:358,12:$V12,15:$V12,28:$V12,182:$V12,204:$V12,209:$V12,278:$V12,27:$V22}),{12:$V7,15:$V8,27:$VH,28:$VD1,52:145,79:$VJ,89:146,164:$VK,173:361,186:362,190:360,211:$VE1,213:359,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($V02,$V12,{188:353,195:354,196:356,185:363,27:$V22}),o($VD,$VE,{55:130,59:131,20:364,60:$VF}),o([40,108,212,295],[2,88],{297:365,193:[1,366]}),o($Vp,$V42,{181:367,183:368}),o($Vp,[2,90]),o($Vp,[2,91]),o($Vp,[2,92]),o($V52,[2,114]),o($VG1,[2,372]),o($V52,[2,115]),o($Ve1,[2,165]),{31:[1,369]},o($V21,[2,376]),o([30,31,193,243,303],[2,129],{304:[1,370]}),o($V62,[2,130],{221:371,222:372,223:[2,385],260:[1,373],305:[1,374],306:[1,375],307:[1,376],308:[1,377],309:[1,378],310:[1,379]}),o($V72,[2,387],{225:380}),o($V82,[2,395],{233:381}),{12:$V7,15:$V8,27:$V92,28:$Vj1,52:385,64:384,65:386,74:383,79:$VJ,89:387,228:156,230:157,237:382,239:250,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,245:255,246:$Vo1,247:$Vp1,248:258,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1},{12:$V7,15:$V8,27:$V92,28:$Vj1,52:385,64:384,65:386,74:383,79:$VJ,89:387,228:156,230:157,237:389,239:250,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,245:255,246:$Vo1,247:$Vp1,248:258,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1},{12:$V7,15:$V8,27:$V92,28:$Vj1,52:385,64:384,65:386,74:383,79:$VJ,89:387,228:156,230:157,237:390,239:250,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,245:255,246:$Vo1,247:$Vp1,248:258,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1},o($VI1,[2,400]),{28:[1,393],40:[1,391],91:392},o($Vz,[2,55]),{38:[1,394]},{38:[2,294]},{38:[2,295]},o($Vz,[2,49]),{12:$V7,15:$V8,52:395,278:$Va},o($Ve,[2,284]),o($Vz,[2,50]),o($VR1,[2,16]),o($VR1,[2,239]),{79:[1,396]},{79:[1,397]},{12:$V7,15:$V8,27:$Va2,28:$Vj1,52:259,64:247,65:248,71:398,72:399,73:$Vb2,74:246,75:$Vc2,76:402,239:250,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,245:255,246:$Vo1,247:$Vp1,248:258,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1},o($VS1,[2,243]),{31:[1,404]},o($VU1,[2,150]),o($V21,$V31,{216:176,29:405}),o($V21,$V31,{216:176,29:406}),o($V21,$V31,{216:176,29:407}),o($VU1,[2,154]),o($VU1,[2,81]),o($V21,[2,330],{168:408}),{27:[1,409]},o($VU1,[2,156]),o($V21,$V31,{216:176,29:410}),{38:$VG,54:411},o($VU1,[2,79]),o($V21,[2,326],{165:412,281:[1,413]}),o($Vd2,[2,408],{251:414,281:[1,415]}),o($V21,[2,412],{254:416,281:[1,417]}),o($V21,[2,414],{256:418,281:[1,419]}),o($V_1,[2,241]),{30:[1,421],31:[1,420]},{22:422,40:[2,200],81:423,82:$V3},o($VC1,[2,309]),o($Ve2,[2,310],{149:424,295:[1,425]}),{38:$VG,54:426},{38:$VG,54:427},{38:$VG,54:428},{12:$V7,15:$V8,27:[1,430],52:431,158:429,278:$Va},o($Vf2,[2,322],{160:432,288:[1,433]}),{12:$V7,15:$V8,28:$Vj1,52:259,64:247,65:248,74:246,76:434,239:250,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,245:255,246:$Vo1,247:$Vp1,248:258,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1},{28:[1,435]},o($Vg2,[2,75]),{27:$Vc,28:$Vd,83:436},o($VC1,[2,67]),o($Vp,[2,315],{38:$Vh2,40:$Vh2,82:$Vh2,108:$Vh2,156:$Vh2,157:$Vh2,159:$Vh2,162:$Vh2,163:$Vh2}),o($V32,[2,94]),o($Vp,[2,350],{189:437}),o($Vp,[2,348]),o($Vp,[2,349]),o($V02,[2,358],{197:438,198:439}),o($V32,[2,95]),o($V32,[2,347]),{12:$V7,15:$V8,27:$VH,28:$VD1,31:[1,440],52:145,79:$VJ,89:146,164:$VK,173:361,186:362,190:441,211:$VE1,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($VG1,[2,373]),o($VH1,[2,120]),o($VH1,[2,121]),{212:[1,442]},o($V4,[2,11]),o($Va1,[2,343],{193:[1,443]}),o($Vi2,[2,340]),o([40,108,193,212,295],[2,89]),{12:$V7,15:$V8,27:$VH,28:$VI,52:145,79:$VJ,89:146,164:$VK,173:214,175:215,184:444,211:$VL,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($V11,[2,9]),o($V21,[2,378]),o($VI1,$VJ1,{224:298,232:299,236:300,220:445,204:$VK1,238:$VL1,302:$VM1}),{223:[1,446]},o($V21,[2,379]),o($V21,[2,380]),o($V21,[2,381]),o($V21,[2,382]),o($V21,[2,383]),o($V21,[2,384]),{223:[2,386]},o([30,31,193,223,243,260,303,304,305,306,307,308,309,310],[2,133],{226:447,227:448,228:449,230:450,238:[1,452],272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,302:[1,451]}),o($V72,[2,137],{234:453,235:454,284:$Vj2,299:$Vk2}),o($V82,[2,139]),o($V82,[2,142]),o($V82,[2,143]),o($V82,[2,144],{28:$VX1,164:$VY1}),o($V82,[2,145]),o($V82,[2,146]),o($V82,[2,147]),o($V82,[2,140]),o($V82,[2,141]),o($VN1,[2,36]),o($VP1,[2,251]),o($Vl2,[2,252],{92:457}),o($Vp,$VA,{141:122,137:458,140:459,40:[2,296]}),o($VC,[2,53]),o($VR1,[2,29],{80:[1,460]}),o($VR1,[2,30],{78:[1,461]}),o($Vi1,[2,24],{74:246,64:247,65:248,239:250,245:255,248:258,52:259,76:402,72:462,12:$V7,15:$V8,27:$Va2,28:$Vj1,73:$Vb2,75:$Vc2,240:$Vk1,241:$Vl1,242:$Vm1,244:$Vn1,246:$Vo1,247:$Vp1,249:$Vq1,250:$Vr1,253:$Vs1,255:$Vt1,278:$Va,310:$Vu1,311:$Vv1,312:$Vw1,313:$Vx1,314:$Vy1,315:$Vz1}),o($Vm2,[2,244]),{28:$Vj1,74:463},{28:$Vj1,74:464},o($Vm2,[2,27]),o($Vm2,[2,28]),o([6,12,15,27,28,30,31,38,40,70,73,75,78,79,80,82,108,156,157,159,162,163,164,193,211,214,215,223,238,240,241,242,243,244,246,247,249,250,253,255,260,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,284,295,299,302,303,304,305,306,307,308,309,310,311,312,313,314,315],[2,148]),{31:[1,465]},{243:[1,466]},{243:[1,467]},o($V21,$V31,{216:176,29:468}),{31:[1,469]},{31:[1,470]},o($VU1,[2,158]),o($V21,[2,328],{166:471}),o($V21,[2,327]),o($V21,$V31,{216:176,252:472,29:474,284:[1,473]}),o($Vd2,[2,409]),o($V21,$V31,{216:176,29:475}),o($V21,[2,413]),o($V21,$V31,{216:176,29:476}),o($V21,[2,415]),o($V_1,[2,20]),{27:[1,477]},{40:[2,6]},{40:[2,201]},o($Vp,$V81,{152:200,150:478,151:479,38:$Vn2,40:$Vn2,82:$Vn2,108:$Vn2,156:$Vn2,157:$Vn2,159:$Vn2,162:$Vn2,163:$Vn2}),o($Ve2,[2,311]),o($Vg2,[2,68],{296:[1,480]}),o($Vg2,[2,69]),o($Vg2,[2,70]),{38:$VG,54:481},{38:[2,320]},{38:[2,321]},{12:$V7,15:$V8,27:[1,483],52:484,161:482,278:$Va},o($Vf2,[2,323]),o($Vg2,[2,73]),o($V21,$V31,{216:176,29:485}),o($Vg2,[2,34]),{12:$V7,15:$V8,27:$VH,28:$VD1,52:145,79:$VJ,89:146,164:$VK,173:361,186:362,190:486,211:$VE1,214:$VM,215:$VN,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},o($VG1,[2,99],{298:[1,487]}),o($Vo2,[2,365],{199:488,203:489,209:[1,490]}),o($Vd1,[2,116]),o($VG1,[2,374]),o($Vd1,[2,117]),o($Vi2,[2,341]),o($Vp2,[2,93],{243:[1,491]}),o($V62,[2,131]),{28:$VV1,164:$VW1,167:492},o($V72,[2,388]),o($VI1,$VJ1,{232:299,236:300,224:493,204:$VK1,238:$VL1,302:$VM1}),o($V82,[2,391],{229:494}),o($V82,[2,393],{231:495}),o($V21,[2,389]),o($V21,[2,390]),o($V82,[2,396]),o($VI1,$VJ1,{236:300,232:496,204:$VK1,238:$VL1,302:$VM1}),o($V21,[2,397]),o($V21,[2,398]),{12:$V7,15:$V8,31:[1,497],52:225,79:$VJ,88:498,89:226,90:$Vg1,228:156,230:157,261:152,264:$VO,265:$VP,266:$VQ,267:$VR,268:$VS,269:$VT,270:$VU,271:$VV,272:$VW,273:$VX,274:$VY,275:$VZ,276:$V_,277:$V$,278:$Va},{40:[1,499]},{40:[2,297]},{79:[1,500]},{79:[1,501]},o($Vm2,[2,245]),o($Vm2,[2,25]),o($Vm2,[2,26]),o($VU1,[2,151]),o($V21,$V31,{216:176,29:502}),o($V21,$V31,{216:176,29:503}),{31:[1,504],243:[1,505]},o($VU1,[2,155]),o($VU1,[2,157]),o($V21,$V31,{216:176,29:506}),{31:[1,507]},{31:[2,410]},{31:[2,411]},{31:[1,508]},{31:[2,416],193:[1,511],257:509,258:510},{31:[1,512]},o($VC1,[2,66]),o($VC1,[2,313]),{38:[2,319]},o($Vg2,[2,71]),{38:$VG,54:513},{38:[2,324]},{38:[2,325]},{30:[1,514]},o($Vp2,[2,352],{191:515,243:[1,516]}),o($V02,[2,357]),o([12,15,27,28,31,79,164,211,214,215,264,265,266,267,268,269,270,271,272,273,274,275,276,277,278,298],[2,100],{299:[1,517]}),{12:$V7,15:$V8,28:[1,523],52:520,182:[1,521],200:518,201:519,204:[1,522],278:$Va},o($Vo2,[2,366]),o($Vp,[2,345]),o($V62,[2,132]),o($V72,[2,134]),o($V72,[2,135],{235:454,234:524,284:$Vj2,299:$Vk2}),o($V72,[2,136],{235:454,234:525,284:$Vj2,299:$Vk2}),o($V82,[2,138]),o($VP1,[2,40]),o($Vl2,[2,253]),o($Vq2,[2,298],{138:526,295:[1,527]}),o($VR1,[2,31]),o($VR1,[2,32]),{31:[1,528]},{243:[1,529]},o($VU1,[2,82]),o($V21,[2,331]),{31:[1,530],243:[1,531]},o($VU1,[2,159]),o($VU1,[2,160]),{31:[1,532]},{31:[2,417]},{259:[1,533]},o($V_1,[2,21]),o($Vg2,[2,72]),{27:[1,534]},o([38,40,82,108,156,157,159,162,163,212,295],[2,96],{192:535,193:[1,536]}),o($Vp,[2,351]),o($V02,[2,359]),o($Vr2,[2,102]),o($Vr2,[2,363],{202:537,300:538,284:[1,540],301:[1,539],302:[1,541]}),o($Vs2,[2,103]),o($Vs2,[2,104]),{12:$V7,15:$V8,28:[1,545],52:546,164:[1,544],182:$Vt2,205:542,206:543,209:$Vu2,278:$Va},o($V02,$V12,{196:356,195:549}),o($V82,[2,392]),o($V82,[2,394]),o($Vp,$VA,{141:122,139:550,140:551,40:$Vv2,108:$Vv2}),o($Vq2,[2,299]),o($VU1,[2,152]),o($V21,$V31,{216:176,29:552}),o($VU1,[2,80]),o($V21,[2,329]),o($VU1,[2,161]),{260:[1,553]},{31:[1,554]},o($Vp2,[2,353]),o($Vp2,[2,97],{196:356,194:555,195:556,12:$V12,15:$V12,28:$V12,182:$V12,204:$V12,209:$V12,278:$V12,27:[1,557]}),o($Vr2,[2,101]),o($Vr2,[2,364]),o($Vr2,[2,360]),o($Vr2,[2,361]),o($Vr2,[2,362]),o($Vs2,[2,105]),o($Vs2,[2,107]),o($Vs2,[2,108]),o($Vw2,[2,367],{207:558}),o($Vs2,[2,110]),o($Vs2,[2,111]),{12:$V7,15:$V8,52:559,182:[1,560],278:$Va},{31:[1,561]},o($V61,[2,61]),o($V61,[2,301]),{31:[1,562]},{261:563,268:$VS,269:$VT,270:$VU,271:$VV},o($Vg2,[2,74]),o($Vp,$V42,{183:368,181:564}),o($Vp,[2,354]),o($Vp,[2,355]),{12:$V7,15:$V8,31:[2,369],52:546,182:$Vt2,206:566,208:565,209:$Vu2,278:$Va},o($Vs2,[2,112]),o($Vs2,[2,113]),o($Vs2,[2,106]),o($VU1,[2,153]),{31:[2,162]},o($Vp2,[2,98]),{31:[1,567]},{31:[2,370],298:[1,568]},o($Vs2,[2,109]),o($Vw2,[2,368])],
defaultActions: {5:[2,190],6:[2,191],22:[2,1],23:[2,2],24:[2,197],74:[2,270],89:[2,231],94:[2,333],204:[2,215],205:[2,84],268:[2,407],307:[2,294],308:[2,295],379:[2,386],422:[2,6],423:[2,201],430:[2,320],431:[2,321],459:[2,297],473:[2,410],474:[2,411],480:[2,319],483:[2,324],484:[2,325],510:[2,417],563:[2,162]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  /*
    SPARQL parser in the Jison parser generator format.
  */

  // Common namespaces and entities
  var RDF = 'http://www.w3.org/1999/02/22-rdf-syntax-ns#',
      RDF_TYPE  = RDF + 'type',
      RDF_FIRST = RDF + 'first',
      RDF_REST  = RDF + 'rest',
      RDF_NIL   = RDF + 'nil',
      XSD = 'http://www.w3.org/2001/XMLSchema#',
      XSD_INTEGER  = XSD + 'integer',
      XSD_DECIMAL  = XSD + 'decimal',
      XSD_DOUBLE   = XSD + 'double',
      XSD_BOOLEAN  = XSD + 'boolean',
      XSD_TRUE =  '"true"^^'  + XSD_BOOLEAN,
      XSD_FALSE = '"false"^^' + XSD_BOOLEAN;

  var base = '', basePath = '', baseRoot = '';

  // Returns a lowercase version of the given string
  function lowercase(string) {
    return string.toLowerCase();
  }

  // Appends the item to the array and returns the array
  function appendTo(array, item) {
    return array.push(item), array;
  }

  // Appends the items to the array and returns the array
  function appendAllTo(array, items) {
    return array.push.apply(array, items), array;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  // Creates an array that contains all items of the given arrays
  function unionAll() {
    var union = [];
    for (var i = 0, l = arguments.length; i < l; i++)
      union = union.concat.apply(union, arguments[i]);
    return union;
  }

  // Resolves an IRI against a base path
  function resolveIRI(iri) {
    // Strip off possible angular brackets
    if (iri[0] === '<')
      iri = iri.substring(1, iri.length - 1);
    switch (iri[0]) {
    // An empty relative IRI indicates the base IRI
    case undefined:
      return base;
    // Resolve relative fragment IRIs against the base IRI
    case '#':
      return base + iri;
    // Resolve relative query string IRIs by replacing the query string
    case '?':
      return base.replace(/(?:\?.*)?$/, iri);
    // Resolve root relative IRIs at the root of the base IRI
    case '/':
      return baseRoot + iri;
    // Resolve all other IRIs at the base IRI's path
    default:
      return /^[a-z]+:/.test(iri) ? iri : basePath + iri;
    }
  }

  // If the item is a variable, ensures it starts with a question mark
  function toVar(variable) {
    if (variable) {
      var first = variable[0];
      if (first === '?') return variable;
      if (first === '$') return '?' + variable.substr(1);
    }
    return variable;
  }

  // Creates an operation with the given name and arguments
  function operation(operatorName, args) {
    return { type: 'operation', operator: operatorName, args: args || [] };
  }

  // Creates an expression with the given type and attributes
  function expression(expr, attr) {
    var expression = { expression: expr };
    if (attr)
      for (var a in attr)
        expression[a] = attr[a];
    return expression;
  }

  // Creates a path with the given type and items
  function path(type, items) {
    return { type: 'path', pathType: type, items: items };
  }

  // Transforms a list of operations types and arguments into a tree of operations
  function createOperationTree(initialExpression, operationList) {
    for (var i = 0, l = operationList.length, item; i < l && (item = operationList[i]); i++)
      initialExpression = operation(item[0], [initialExpression, item[1]]);
    return initialExpression;
  }

  // Group datasets by default and named
  function groupDatasets(fromClauses) {
    var defaults = [], named = [], l = fromClauses.length, fromClause;
    for (var i = 0; i < l && (fromClause = fromClauses[i]); i++)
      (fromClause.named ? named : defaults).push(fromClause.iri);
    return l ? { from: { default: defaults, named: named } } : null;
  }

  // Converts the number to a string
  function toInt(string) {
    return parseInt(string, 10);
  }

  // Transforms a possibly single group into its patterns
  function degroupSingle(group) {
    return group.type === 'group' && group.patterns.length === 1 ? group.patterns[0] : group;
  }

  // Creates a literal with the given value and type
  function createLiteral(value, type) {
    return '"' + value + '"^^' + type;
  }

  // Creates a triple with the given subject, predicate, and object
  function triple(subject, predicate, object) {
    var triple = {};
    if (subject   != null) triple.subject   = subject;
    if (predicate != null) triple.predicate = predicate;
    if (object    != null) triple.object    = object;
    return triple;
  }

  // Creates a new blank node identifier
  function blank() {
    return '_:b' + blankId++;
  };
  var blankId = 0;
  Parser._resetBlanks = function () { blankId = 0; }

  // Regular expression and replacement strings to escape strings
  var escapeSequence = /\\u([a-fA-F0-9]{4})|\\U([a-fA-F0-9]{8})|\\(.)/g,
      escapeReplacements = { '\\': '\\', "'": "'", '"': '"',
                             't': '\t', 'b': '\b', 'n': '\n', 'r': '\r', 'f': '\f' },
      fromCharCode = String.fromCharCode;

  // Translates escape codes in the string into their textual equivalent
  function unescapeString(string, trimLength) {
    string = string.substring(trimLength, string.length - trimLength);
    try {
      string = string.replace(escapeSequence, function (sequence, unicode4, unicode8, escapedChar) {
        var charCode;
        if (unicode4) {
          charCode = parseInt(unicode4, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          return fromCharCode(charCode);
        }
        else if (unicode8) {
          charCode = parseInt(unicode8, 16);
          if (isNaN(charCode)) throw new Error(); // can never happen (regex), but helps performance
          if (charCode < 0xFFFF) return fromCharCode(charCode);
          return fromCharCode(0xD800 + ((charCode -= 0x10000) >> 10), 0xDC00 + (charCode & 0x3FF));
        }
        else {
          var replacement = escapeReplacements[escapedChar];
          if (!replacement) throw new Error();
          return replacement;
        }
      });
    }
    catch (error) { return ''; }
    return '"' + string + '"';
  }

  // Creates a list, collecting its (possibly blank) items and triples associated with those items
  function createList(objects) {
    var list = blank(), head = list, listItems = [], listTriples, triples = [];
    objects.forEach(function (o) { listItems.push(o.entity); appendAllTo(triples, o.triples); });

    // Build an RDF list out of the items
    for (var i = 0, j = 0, l = listItems.length, listTriples = Array(l * 2); i < l;)
      listTriples[j++] = triple(head, RDF_FIRST, listItems[i]),
      listTriples[j++] = triple(head, RDF_REST,  head = ++i < l ? blank() : RDF_NIL);

    // Return the list's identifier, its triples, and the triples associated with its items
    return { entity: list, triples: appendAllTo(listTriples, triples) };
  }

  // Creates a blank node identifier, collecting triples with that blank node as subject
  function createAnonymousObject(propertyList) {
    var entity = blank();
    return {
      entity: entity,
      triples: propertyList.map(function (t) { return extend(triple(entity), t); })
    };
  }

  // Collects all (possibly blank) objects, and triples that have them as subject
  function objectListToTriples(predicate, objectList, otherTriples) {
    var objects = [], triples = [];
    objectList.forEach(function (l) {
      objects.push(triple(null, predicate, l.entity));
      appendAllTo(triples, l.triples);
    });
    return unionAll(objects, otherTriples || [], triples);
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"flex":true,"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* ignore */
break;
case 1:return 11
break;
case 2:return 14
break;
case 3:return 23
break;
case 4:return 281
break;
case 5:return 282
break;
case 6:return 28
break;
case 7:return 30
break;
case 8:return 31
break;
case 9:return 284
break;
case 10:return 33
break;
case 11:return 37
break;
case 12:return 38
break;
case 13:return 40
break;
case 14:return 42
break;
case 15:return 47
break;
case 16:return 50
break;
case 17:return 287
break;
case 18:return 60
break;
case 19:return 61
break;
case 20:return 67
break;
case 21:return 70
break;
case 22:return 73
break;
case 23:return 75
break;
case 24:return 78
break;
case 25:return 80
break;
case 26:return 82
break;
case 27:return 193
break;
case 28:return 96
break;
case 29:return 288
break;
case 30:return 129
break;
case 31:return 289
break;
case 32:return 290
break;
case 33:return 106
break;
case 34:return 291
break;
case 35:return 105
break;
case 36:return 292
break;
case 37:return 293
break;
case 38:return 109
break;
case 39:return 111
break;
case 40:return 112
break;
case 41:return 127
break;
case 42:return 121
break;
case 43:return 122
break;
case 44:return 124
break;
case 45:return 130
break;
case 46:return 108
break;
case 47:return 294
break;
case 48:return 295
break;
case 49:return 156
break;
case 50:return 159
break;
case 51:return 163
break;
case 52:return 90
break;
case 53:return 157
break;
case 54:return 296
break;
case 55:return 162
break;
case 56:return 243
break;
case 57:return 182
break;
case 58:return 298
break;
case 59:return 299
break;
case 60:return 209
break;
case 61:return 301
break;
case 62:return 302
break;
case 63:return 204
break;
case 64:return 211
break;
case 65:return 212
break;
case 66:return 303
break;
case 67:return 304
break;
case 68:return 260
break;
case 69:return 305
break;
case 70:return 306
break;
case 71:return 307
break;
case 72:return 308
break;
case 73:return 309
break;
case 74:return 223
break;
case 75:return 310
break;
case 76:return 238
break;
case 77:return 246
break;
case 78:return 247
break;
case 79:return 240
break;
case 80:return 241
break;
case 81:return 242
break;
case 82:return 311
break;
case 83:return 312
break;
case 84:return 244
break;
case 85:return 314
break;
case 86:return 313
break;
case 87:return 315
break;
case 88:return 249
break;
case 89:return 250
break;
case 90:return 253
break;
case 91:return 255
break;
case 92:return 259
break;
case 93:return 263
break;
case 94:return 266
break;
case 95:return 267
break;
case 96:return 12
break;
case 97:return 15
break;
case 98:return 278
break;
case 99:return 214
break;
case 100:return 27
break;
case 101:return 262
break;
case 102:return 79
break;
case 103:return 264
break;
case 104:return 265
break;
case 105:return 272
break;
case 106:return 273
break;
case 107:return 274
break;
case 108:return 275
break;
case 109:return 276
break;
case 110:return 277
break;
case 111:return 'EXPONENT'
break;
case 112:return 268
break;
case 113:return 269
break;
case 114:return 270
break;
case 115:return 271
break;
case 116:return 164
break;
case 117:return 215
break;
case 118:return 6
break;
case 119:return 'INVALID'
break;
case 120:console.log(yy_.yytext);
break;
}
},
rules: [/^(?:\s+|#[^\n\r]*)/i,/^(?:BASE)/i,/^(?:PREFIX)/i,/^(?:SELECT)/i,/^(?:DISTINCT)/i,/^(?:REDUCED)/i,/^(?:\()/i,/^(?:AS)/i,/^(?:\))/i,/^(?:\*)/i,/^(?:CONSTRUCT)/i,/^(?:WHERE)/i,/^(?:\{)/i,/^(?:\})/i,/^(?:DESCRIBE)/i,/^(?:ASK)/i,/^(?:FROM)/i,/^(?:NAMED)/i,/^(?:GROUP)/i,/^(?:BY)/i,/^(?:HAVING)/i,/^(?:ORDER)/i,/^(?:ASC)/i,/^(?:DESC)/i,/^(?:LIMIT)/i,/^(?:OFFSET)/i,/^(?:VALUES)/i,/^(?:;)/i,/^(?:LOAD)/i,/^(?:SILENT)/i,/^(?:INTO)/i,/^(?:CLEAR)/i,/^(?:DROP)/i,/^(?:CREATE)/i,/^(?:ADD)/i,/^(?:TO)/i,/^(?:MOVE)/i,/^(?:COPY)/i,/^(?:INSERT\s+DATA)/i,/^(?:DELETE\s+DATA)/i,/^(?:DELETE\s+WHERE)/i,/^(?:WITH)/i,/^(?:DELETE)/i,/^(?:INSERT)/i,/^(?:USING)/i,/^(?:DEFAULT)/i,/^(?:GRAPH)/i,/^(?:ALL)/i,/^(?:\.)/i,/^(?:OPTIONAL)/i,/^(?:SERVICE)/i,/^(?:BIND)/i,/^(?:UNDEF)/i,/^(?:MINUS)/i,/^(?:UNION)/i,/^(?:FILTER)/i,/^(?:,)/i,/^(?:a)/i,/^(?:\|)/i,/^(?:\/)/i,/^(?:\^)/i,/^(?:\?)/i,/^(?:\+)/i,/^(?:!)/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:=)/i,/^(?:!=)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:IN)/i,/^(?:NOT)/i,/^(?:-)/i,/^(?:BOUND)/i,/^(?:BNODE)/i,/^(?:(RAND|NOW|UUID|STUUID))/i,/^(?:(LANG|DATATYPE|IRI|URI|ABS|CEIL|FLOOR|ROUND|STRLEN|STR|UCASE|LCASE|ENCODE_FOR_URI|YEAR|MONTH|DAY|HOURS|MINUTES|SECONDS|TIMEZONE|TZ|MD5|SHA1|SHA256|SHA384|SHA512|isIRI|isURI|isBLANK|isLITERAL|isNUMERIC))/i,/^(?:(LANGMATCHES|CONTAINS|STRSTARTS|STRENDS|STRBEFORE|STRAFTER|STRLANG|STRDT|sameTerm))/i,/^(?:CONCAT)/i,/^(?:COALESCE)/i,/^(?:IF)/i,/^(?:REGEX)/i,/^(?:SUBSTR)/i,/^(?:REPLACE)/i,/^(?:EXISTS)/i,/^(?:COUNT)/i,/^(?:SUM|MIN|MAX|AVG|SAMPLE)/i,/^(?:GROUP_CONCAT)/i,/^(?:SEPARATOR)/i,/^(?:\^\^)/i,/^(?:true)/i,/^(?:false)/i,/^(?:(<([^<>\"\{\}\|\^`\\\u0000-\u0020])*>))/i,/^(?:((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:))/i,/^(?:(((([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?)?:)((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|:|[0-9]|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%))))*((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|:|((%([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))|(\\(_|~|\.|-|!|\$|&|'|\(|\)|\*|\+|,|;|=|\/|\?|#|@|%)))))?)))/i,/^(?:(_:(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])|\.)*(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|-|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040]))?))/i,/^(?:([\?\$]((((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9])(((?:([A-Z]|[a-z]|[\u00C0-\u00D6]|[\u00D8-\u00F6]|[\u00F8-\u02FF]|[\u0370-\u037D]|[\u037F-\u1FFF]|[\u200C-\u200D]|[\u2070-\u218F]|[\u2C00-\u2FEF]|[\u3001-\uD7FF]|[\uF900-\uFDCF]|[\uFDF0-\uFFFD]|[\uD800-\uDB7F][\uDC00-\uDFFF])|_))|[0-9]|\u00B7|[\u0300-\u036F]|[\u203F-\u2040])*)))/i,/^(?:(@[a-zA-Z]+(-[a-zA-Z0-9]+)*))/i,/^(?:([0-9]+))/i,/^(?:([0-9]*\.[0-9]+))/i,/^(?:([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+)))/i,/^(?:(\+([0-9]+)))/i,/^(?:(\+([0-9]*\.[0-9]+)))/i,/^(?:(\+([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:(-([0-9]+)))/i,/^(?:(-([0-9]*\.[0-9]+)))/i,/^(?:(-([0-9]+\.[0-9]*([eE][+-]?[0-9]+)|\.([0-9])+([eE][+-]?[0-9]+)|([0-9])+([eE][+-]?[0-9]+))))/i,/^(?:([eE][+-]?[0-9]+))/i,/^(?:('(([^\u0027\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*'))/i,/^(?:("(([^\u0022\u005C\u000A\u000D])|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])))*"))/i,/^(?:('''(('|'')?([^'\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*'''))/i,/^(?:("""(("|"")?([^\"\\]|(\\[tbnrf\\\"']|\\u([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])|\\U([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f])([0-9]|[A-F]|[a-f]))))*"""))/i,/^(?:(\((\u0020|\u0009|\u000D|\u000A)*\)))/i,/^(?:(\[(\u0020|\u0009|\u000D|\u000A)*\]))/i,/^(?:$)/i,/^(?:.)/i,/^(?:.)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59,60,61,62,63,64,65,66,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,83,84,85,86,87,88,89,90,91,92,93,94,95,96,97,98,99,100,101,102,103,104,105,106,107,108,109,110,111,112,113,114,115,116,117,118,119,120],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}